
build/multifx.elf:     file format elf32-littlearm


Disassembly of section .text:

20017840 <_text_start>:

__attribute__((weak))
void _hook_process(const float *main_xn, float *main_yn,
                   const float *sub_xn, float *sub_yn,
                   uint32_t frames)
{
20017840:	4770      	bx	lr

20017842 <_hook_resume>:

}

__attribute__((weak))
void _hook_resume(void)
{
20017842:	4770      	bx	lr

}

__attribute__((weak))
void _hook_param(uint8_t index, int32_t value)
{
20017844:	4770      	bx	lr

20017846 <_hook_suspend>:
20017846:	4770      	bx	lr
  _hook_init(platform, api);
}

__attribute__((weak))
void _hook_init(uint32_t platform, uint32_t api)
{
20017848:	4770      	bx	lr

2001784a <_entry>:
 * @{
 */

__attribute__((used))
void _entry(uint32_t platform, uint32_t api)
{
2001784a:	4b10      	ldr	r3, [pc, #64]	; (2001788c <_entry+0x42>)
2001784c:	4a10      	ldr	r2, [pc, #64]	; (20017890 <_entry+0x46>)
2001784e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
20017852:	4688      	mov	r8, r1
20017854:	4607      	mov	r7, r0
  // Ensure zero-clear BSS segment
  uint8_t * __restrict bss_p = (uint8_t *)&_bss_start;
  const uint8_t * const bss_e = (uint8_t *)&_bss_end;

  for (; bss_p != bss_e;)
    *(bss_p++) = 0;
20017856:	2100      	movs	r1, #0
{
  // Ensure zero-clear BSS segment
  uint8_t * __restrict bss_p = (uint8_t *)&_bss_start;
  const uint8_t * const bss_e = (uint8_t *)&_bss_end;

  for (; bss_p != bss_e;)
20017858:	4293      	cmp	r3, r2
2001785a:	d002      	beq.n	20017862 <_entry+0x18>
    *(bss_p++) = 0;
2001785c:	f803 1f01 	strb.w	r1, [r3, #1]!
20017860:	e7fa      	b.n	20017858 <_entry+0xe>
20017862:	4b0c      	ldr	r3, [pc, #48]	; (20017894 <_entry+0x4a>)
20017864:	4c0c      	ldr	r4, [pc, #48]	; (20017898 <_entry+0x4e>)
20017866:	1ae4      	subs	r4, r4, r3
20017868:	10a4      	asrs	r4, r4, #2

  // Call constructors if any.  
  const size_t count = __init_array_end - __init_array_start;
  for (size_t i = 0; i<count; ++i) {
2001786a:	2500      	movs	r5, #0
2001786c:	461e      	mov	r6, r3
2001786e:	42a5      	cmp	r5, r4
20017870:	d005      	beq.n	2001787e <_entry+0x34>
    __init_fptr init_p = (__init_fptr)__init_array_start[i];
20017872:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    if (init_p != NULL)
20017876:	b103      	cbz	r3, 2001787a <_entry+0x30>
      init_p();
20017878:	4798      	blx	r3
  for (; bss_p != bss_e;)
    *(bss_p++) = 0;

  // Call constructors if any.  
  const size_t count = __init_array_end - __init_array_start;
  for (size_t i = 0; i<count; ++i) {
2001787a:	3501      	adds	r5, #1
2001787c:	e7f7      	b.n	2001786e <_entry+0x24>
    if (init_p != NULL)
      init_p();
  }
  
  // Call user initialization
  _hook_init(platform, api);
2001787e:	4641      	mov	r1, r8
20017880:	4638      	mov	r0, r7
20017882:	f000 f80b 	bl	2001789c <_hook_init>
20017886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
2001788a:	bf00      	nop
2001788c:	20017967 	.word	0x20017967
20017890:	20017967 	.word	0x20017967
20017894:	20017840 	.word	0x20017840
20017898:	20017840 	.word	0x20017840

2001789c <_hook_init>:
    return 1.5f * in - 0.5f * in *in * in;
}

// Initializing Platform //
void MODFX_INIT(uint32_t platform, uint32_t api)
{
2001789c:	4770      	bx	lr

2001789e <_hook_process>:
  for (int i=0;i<frames*2;i++)
  {
    switch(type)
    {
      case 0:
        *yn++ = *xn++;  
2001789e:	4b18      	ldr	r3, [pc, #96]	; (20017900 <_hook_process+0x62>)
// Main DSP Process Block //
// Sub values to be ignored, only used for prologue
void MODFX_PROCESS(const float *xn, float *yn,
                   const float *sub_xn, float *sub_yn,
                   uint32_t frames)
{
200178a0:	b510      	push	{r4, lr}
  for (int i=0;i<frames*2;i++)
  {
    switch(type)
    {
      case 0:
        *yn++ = *xn++;  
200178a2:	edd3 6a00 	vldr	s13, [r3]
        break;
200178a6:	685c      	ldr	r4, [r3, #4]
200178a8:	9b02      	ldr	r3, [sp, #8]
  for (int i=0;i<frames*2;i++)
  {
    switch(type)
    {
      case 0:
        *yn++ = *xn++;  
200178aa:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
200178ae:	005a      	lsls	r2, r3, #1
200178b0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
{
  float base_main;

  // Effect processing loop //
  // For double frames (AKA samples cause each frame = sample pair)
  for (int i=0;i<frames*2;i++)
200178b4:	2300      	movs	r3, #0
      // Waveshaping algorithm // 
      case 3:
        base_main = *xn++ * ((fxamt * 10.0f) + 1.f);
        *yn++ = waveshape(base_main);
        break;
    }
200178b6:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
200178ba:	eef7 4a08 	vmov.f32	s9, #120	; 0x3fc00000  1.5
{
  float base_main;

  // Effect processing loop //
  // For double frames (AKA samples cause each frame = sample pair)
  for (int i=0;i<frames*2;i++)
200178be:	4293      	cmp	r3, r2
200178c0:	d01c      	beq.n	200178fc <_hook_process+0x5e>
  {
    switch(type)
    {
      case 0:
        *yn++ = *xn++;  
200178c2:	eef0 7a65 	vmov.f32	s15, s11
200178c6:	eee6 7a86 	vfma.f32	s15, s13, s12
200178ca:	ecb0 7a01 	vldmia	r0!, {s14}
200178ce:	ee67 7a87 	vmul.f32	s15, s15, s14
        break;
200178d2:	2c03      	cmp	r4, #3
200178d4:	d810      	bhi.n	200178f8 <_hook_process+0x5a>
200178d6:	e8df f004 	tbb	[pc, r4]
200178da:	0c0c      	.short	0x0c0c
200178dc:	020c      	.short	0x020c
      // Waveshaping algorithm // 
      case 3:
        base_main = *xn++ * ((fxamt * 10.0f) + 1.f);
        *yn++ = waveshape(base_main);
        break;
    }
200178de:	ee27 7aa7 	vmul.f32	s14, s15, s15
200178e2:	ee27 7a27 	vmul.f32	s14, s14, s15
200178e6:	ee25 7a47 	vnmul.f32	s14, s10, s14
200178ea:	eea7 7aa4 	vfma.f32	s14, s15, s9
200178ee:	eef0 7a47 	vmov.f32	s15, s14
200178f2:	edc1 7a00 	vstr	s15, [r1]
200178f6:	3104      	adds	r1, #4
{
  float base_main;

  // Effect processing loop //
  // For double frames (AKA samples cause each frame = sample pair)
  for (int i=0;i<frames*2;i++)
200178f8:	3301      	adds	r3, #1
200178fa:	e7e0      	b.n	200178be <_hook_process+0x20>
200178fc:	bd10      	pop	{r4, pc}
200178fe:	bf00      	nop
20017900:	20017960 	.word	0x20017960

20017904 <_hook_param>:
void MODFX_PARAM(uint8_t index, int32_t value)
{
  //Convert fixed-point q31 format to float
  const float valf = q31_to_f32(value);
  switch (index)
  {
20017904:	ee07 1a90 	vmov	s15, r1
20017908:	eefa 7ae0 	vcvt.f32.s32	s15, s15, #31
    case 0:
2001790c:	b110      	cbz	r0, 20017914 <_hook_param+0x10>
2001790e:	2801      	cmp	r0, #1
20017910:	d004      	beq.n	2001791c <_hook_param+0x18>
20017912:	4770      	bx	lr
      fxamt = valf;
      break;
    case 1:
20017914:	4b11      	ldr	r3, [pc, #68]	; (2001795c <_hook_param+0x58>)
20017916:	edc3 7a00 	vstr	s15, [r3]
      if (valf < 0.25) 
2001791a:	4770      	bx	lr
      {
        type = 0;
2001791c:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
20017920:	eef4 7ac7 	vcmpe.f32	s15, s14
20017924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20017928:	4b0c      	ldr	r3, [pc, #48]	; (2001795c <_hook_param+0x58>)
2001792a:	d502      	bpl.n	20017932 <_hook_param+0x2e>
      } 
      else if (valf < 0.5) 
2001792c:	2200      	movs	r2, #0
2001792e:	605a      	str	r2, [r3, #4]
20017930:	4770      	bx	lr
      {
        type = 1; 
20017932:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
20017936:	eef4 7ac7 	vcmpe.f32	s15, s14
2001793a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2001793e:	d501      	bpl.n	20017944 <_hook_param+0x40>
      } 
      else if (valf < 0.75) 
20017940:	6058      	str	r0, [r3, #4]
20017942:	4770      	bx	lr
      {
        type = 2; 
20017944:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
20017948:	eef4 7ac7 	vcmpe.f32	s15, s14
2001794c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      } 
      else 
20017950:	bf4c      	ite	mi
20017952:	2202      	movmi	r2, #2
      {
        type = 3; // Waveshaper
      }
      break;
20017954:	2203      	movpl	r2, #3
20017956:	605a      	str	r2, [r3, #4]
20017958:	4770      	bx	lr
2001795a:	bf00      	nop
2001795c:	20017960 	.word	0x20017960
